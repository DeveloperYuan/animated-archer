** Problem Description

   Job shop scheduling is an optimization problem in which n jobs J1,
   J2, ..., Jn of varying sizes are given. These jobs need to be
   scheduled on m identical machines, while trying to minimize the
   makespan. The makespan is the total length of the schedule (that
   is, when all the jobs have finished processing).

** Problem Formulation
*** Variables
    - n, number of Jobs
    - m, number of identical Machine
    - J, an array of each Jobs' weight
    - S, an array of each Jobs' Schedule
*** Constraints
    - m > 1
    - n > m
    - \forall s \in S, 1 <= s <= m
*** Cost Function

    Time takes the longest scheduled machine to finish. See cost.m

*** Goals
    - Minimize cost function
    - Minimize number of iterations for each algorithm
    - Find the best algorithm for the problem
*** Simple Example
    - J = (2,3,4,6,2,2)
    - S = (1,2,2,3,1,1)
    - Cost = 7
    - This setup is optimal
** Tabu Search

** Simulated Annealing
*** Neighbors of each schedule

    Each schedule will have (m-1)*n neighbors, where m is the number
    of machines, and n is the number of jobs. Neighbors will only have
    one job scheduled on a different machine.

*** Finding a suitable start temperature
    - Assume the max change is the MAX of
      - total time of all job divide by number of machines.
      - max time of a single job.
    - Formula to find the max
      - Temp_start = -1 * max_change / ln(p_0), where p_0 is 0.85
    - Start temperature is not calculated within SA, need to be
      calculated before execute the SA.
      - see "findStartTemp" in "SA_test.m".
*** Cooling Schedule
    - Using geometric cooling schedule.
    - Final temperature should close to zero but not equal to zero.
    - alpha = 0.75 ~ 0.9 is commonly used.
    - iteration
      - a constant.
      - number of iteration for each temperature.
** Genetic Algorithm

** Particle Swarm Optimization
*** Overview

    This part uses the Ring Topology or lbest Particle Swarm Algorithm to find 
	optimal solution for job scheduling problem. Each particle is communicating 
    with four of its adjecent neighour. In each iteration, each partical 
    calculates its speed based on the best solution in its neighbour and its 
    personal best. Speed and location is defined in n dimensions.
    
*** Initial state
    - All particals starts with 0 speed at all n directions.
    - All particals starts at location randomly assigned between 1 ~ m in all 
      dimensions.
    - Local best solution is the same as partical's location
    - Neighbor best solution in each particle is the best solution in four of 
      its neighours based on neighbor index.
      
*** Local search criteria
    - v_{t+1}^{i} = w\times v_{t}^{i}+c_{1}r_{1}^{i}(pbest_{t}^{i}-x_{t}^{i})
    - +c_{2}r_{2}^{i}(Nbest_{t}^{i}-x_{t}^{i})

** Ant Colony Optimization
*** Overview

    This part uses Ant Colony System to find the optimal solution for the job
    scheduling problem. The process is similar to find a shortest path between
    two nodes on an weighted tree graph.

*** Initial state
    - All ants starts at layer 0 of the tree, which means no job has been
      scheduled.
    - All routes has initial pheromone of 1.
    - pheromone will decrease 40% after each round.
*** Local search criteria
    - Local search depends on the number of pheromone, and the cost to move the
      next level.
    - The cost is calculate by the the extra number of time required for
      including the next job in certain machine. The cost can be zero.
    - Using experience vs Explore the new scheduling
      1. a rand value is generate to compare with r_0
      2. if the rand value is smaller than r_0, the local search will select the
         route with max amount of pheromone
      3. otherwise, it will do a roulette wheel selection based on ( pheromone /
         (route-cost + 1))
*** Pheromone deposit
    - only the best ants in each round can deposit pheromone on its path.
    - the number of pheromone deposited equals to ( 1 / best-ant-total-cost).
